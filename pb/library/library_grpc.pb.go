// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.3
// source: library.proto

package library

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AuthService_Login_FullMethodName            = "/go_grpc.AuthService/Login"
	AuthService_RegisterBorrower_FullMethodName = "/go_grpc.AuthService/RegisterBorrower"
	AuthService_RegisterAdmin_FullMethodName    = "/go_grpc.AuthService/RegisterAdmin"
)

// AuthServiceClient is the client API for AuthService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Auth Service
type AuthServiceClient interface {
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*ResponseParamLogin, error)
	RegisterBorrower(ctx context.Context, in *RegisterUser, opts ...grpc.CallOption) (*ReturnSimpleResponse, error)
	RegisterAdmin(ctx context.Context, in *RegisterUser, opts ...grpc.CallOption) (*ReturnSimpleResponse, error)
}

type authServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthServiceClient(cc grpc.ClientConnInterface) AuthServiceClient {
	return &authServiceClient{cc}
}

func (c *authServiceClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*ResponseParamLogin, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseParamLogin)
	err := c.cc.Invoke(ctx, AuthService_Login_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) RegisterBorrower(ctx context.Context, in *RegisterUser, opts ...grpc.CallOption) (*ReturnSimpleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReturnSimpleResponse)
	err := c.cc.Invoke(ctx, AuthService_RegisterBorrower_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) RegisterAdmin(ctx context.Context, in *RegisterUser, opts ...grpc.CallOption) (*ReturnSimpleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReturnSimpleResponse)
	err := c.cc.Invoke(ctx, AuthService_RegisterAdmin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthServiceServer is the server API for AuthService service.
// All implementations must embed UnimplementedAuthServiceServer
// for forward compatibility.
//
// Auth Service
type AuthServiceServer interface {
	Login(context.Context, *LoginRequest) (*ResponseParamLogin, error)
	RegisterBorrower(context.Context, *RegisterUser) (*ReturnSimpleResponse, error)
	RegisterAdmin(context.Context, *RegisterUser) (*ReturnSimpleResponse, error)
	mustEmbedUnimplementedAuthServiceServer()
}

// UnimplementedAuthServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAuthServiceServer struct{}

func (UnimplementedAuthServiceServer) Login(context.Context, *LoginRequest) (*ResponseParamLogin, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedAuthServiceServer) RegisterBorrower(context.Context, *RegisterUser) (*ReturnSimpleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterBorrower not implemented")
}
func (UnimplementedAuthServiceServer) RegisterAdmin(context.Context, *RegisterUser) (*ReturnSimpleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterAdmin not implemented")
}
func (UnimplementedAuthServiceServer) mustEmbedUnimplementedAuthServiceServer() {}
func (UnimplementedAuthServiceServer) testEmbeddedByValue()                     {}

// UnsafeAuthServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthServiceServer will
// result in compilation errors.
type UnsafeAuthServiceServer interface {
	mustEmbedUnimplementedAuthServiceServer()
}

func RegisterAuthServiceServer(s grpc.ServiceRegistrar, srv AuthServiceServer) {
	// If the following call pancis, it indicates UnimplementedAuthServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AuthService_ServiceDesc, srv)
}

func _AuthService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_RegisterBorrower_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).RegisterBorrower(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_RegisterBorrower_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).RegisterBorrower(ctx, req.(*RegisterUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_RegisterAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).RegisterAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_RegisterAdmin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).RegisterAdmin(ctx, req.(*RegisterUser))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthService_ServiceDesc is the grpc.ServiceDesc for AuthService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "go_grpc.AuthService",
	HandlerType: (*AuthServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _AuthService_Login_Handler,
		},
		{
			MethodName: "RegisterBorrower",
			Handler:    _AuthService_RegisterBorrower_Handler,
		},
		{
			MethodName: "RegisterAdmin",
			Handler:    _AuthService_RegisterAdmin_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "library.proto",
}

const (
	BookService_GetBook_FullMethodName    = "/go_grpc.BookService/GetBook"
	BookService_ListBooks_FullMethodName  = "/go_grpc.BookService/ListBooks"
	BookService_CreateBook_FullMethodName = "/go_grpc.BookService/CreateBook"
	BookService_UpdateBook_FullMethodName = "/go_grpc.BookService/UpdateBook"
	BookService_DeleteBook_FullMethodName = "/go_grpc.BookService/DeleteBook"
)

// BookServiceClient is the client API for BookService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Book Service
type BookServiceClient interface {
	GetBook(ctx context.Context, in *BookRequest, opts ...grpc.CallOption) (*BookResponse, error)
	ListBooks(ctx context.Context, in *ParameterReq, opts ...grpc.CallOption) (*BooksResponse, error)
	CreateBook(ctx context.Context, in *CreateBookRequest, opts ...grpc.CallOption) (*BookResponse, error)
	UpdateBook(ctx context.Context, in *BookUpdateReq, opts ...grpc.CallOption) (*BookResponse, error)
	DeleteBook(ctx context.Context, in *BookRequest, opts ...grpc.CallOption) (*Empty, error)
}

type bookServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBookServiceClient(cc grpc.ClientConnInterface) BookServiceClient {
	return &bookServiceClient{cc}
}

func (c *bookServiceClient) GetBook(ctx context.Context, in *BookRequest, opts ...grpc.CallOption) (*BookResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BookResponse)
	err := c.cc.Invoke(ctx, BookService_GetBook_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookServiceClient) ListBooks(ctx context.Context, in *ParameterReq, opts ...grpc.CallOption) (*BooksResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BooksResponse)
	err := c.cc.Invoke(ctx, BookService_ListBooks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookServiceClient) CreateBook(ctx context.Context, in *CreateBookRequest, opts ...grpc.CallOption) (*BookResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BookResponse)
	err := c.cc.Invoke(ctx, BookService_CreateBook_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookServiceClient) UpdateBook(ctx context.Context, in *BookUpdateReq, opts ...grpc.CallOption) (*BookResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BookResponse)
	err := c.cc.Invoke(ctx, BookService_UpdateBook_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookServiceClient) DeleteBook(ctx context.Context, in *BookRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, BookService_DeleteBook_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BookServiceServer is the server API for BookService service.
// All implementations must embed UnimplementedBookServiceServer
// for forward compatibility.
//
// Book Service
type BookServiceServer interface {
	GetBook(context.Context, *BookRequest) (*BookResponse, error)
	ListBooks(context.Context, *ParameterReq) (*BooksResponse, error)
	CreateBook(context.Context, *CreateBookRequest) (*BookResponse, error)
	UpdateBook(context.Context, *BookUpdateReq) (*BookResponse, error)
	DeleteBook(context.Context, *BookRequest) (*Empty, error)
	mustEmbedUnimplementedBookServiceServer()
}

// UnimplementedBookServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBookServiceServer struct{}

func (UnimplementedBookServiceServer) GetBook(context.Context, *BookRequest) (*BookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBook not implemented")
}
func (UnimplementedBookServiceServer) ListBooks(context.Context, *ParameterReq) (*BooksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBooks not implemented")
}
func (UnimplementedBookServiceServer) CreateBook(context.Context, *CreateBookRequest) (*BookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBook not implemented")
}
func (UnimplementedBookServiceServer) UpdateBook(context.Context, *BookUpdateReq) (*BookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBook not implemented")
}
func (UnimplementedBookServiceServer) DeleteBook(context.Context, *BookRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBook not implemented")
}
func (UnimplementedBookServiceServer) mustEmbedUnimplementedBookServiceServer() {}
func (UnimplementedBookServiceServer) testEmbeddedByValue()                     {}

// UnsafeBookServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BookServiceServer will
// result in compilation errors.
type UnsafeBookServiceServer interface {
	mustEmbedUnimplementedBookServiceServer()
}

func RegisterBookServiceServer(s grpc.ServiceRegistrar, srv BookServiceServer) {
	// If the following call pancis, it indicates UnimplementedBookServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BookService_ServiceDesc, srv)
}

func _BookService_GetBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookServiceServer).GetBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BookService_GetBook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookServiceServer).GetBook(ctx, req.(*BookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookService_ListBooks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParameterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookServiceServer).ListBooks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BookService_ListBooks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookServiceServer).ListBooks(ctx, req.(*ParameterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookService_CreateBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookServiceServer).CreateBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BookService_CreateBook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookServiceServer).CreateBook(ctx, req.(*CreateBookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookService_UpdateBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookServiceServer).UpdateBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BookService_UpdateBook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookServiceServer).UpdateBook(ctx, req.(*BookUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookService_DeleteBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookServiceServer).DeleteBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BookService_DeleteBook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookServiceServer).DeleteBook(ctx, req.(*BookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BookService_ServiceDesc is the grpc.ServiceDesc for BookService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BookService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "go_grpc.BookService",
	HandlerType: (*BookServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBook",
			Handler:    _BookService_GetBook_Handler,
		},
		{
			MethodName: "ListBooks",
			Handler:    _BookService_ListBooks_Handler,
		},
		{
			MethodName: "CreateBook",
			Handler:    _BookService_CreateBook_Handler,
		},
		{
			MethodName: "UpdateBook",
			Handler:    _BookService_UpdateBook_Handler,
		},
		{
			MethodName: "DeleteBook",
			Handler:    _BookService_DeleteBook_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "library.proto",
}

const (
	AuthorService_GetAuthor_FullMethodName    = "/go_grpc.AuthorService/GetAuthor"
	AuthorService_ListAuthors_FullMethodName  = "/go_grpc.AuthorService/ListAuthors"
	AuthorService_CreateAuthor_FullMethodName = "/go_grpc.AuthorService/CreateAuthor"
	AuthorService_UpdateAuthor_FullMethodName = "/go_grpc.AuthorService/UpdateAuthor"
	AuthorService_DeleteAuthor_FullMethodName = "/go_grpc.AuthorService/DeleteAuthor"
)

// AuthorServiceClient is the client API for AuthorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Author Service
type AuthorServiceClient interface {
	GetAuthor(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*AuthorResponse, error)
	ListAuthors(ctx context.Context, in *ParameterReq, opts ...grpc.CallOption) (*AuthorsResponse, error)
	CreateAuthor(ctx context.Context, in *Author, opts ...grpc.CallOption) (*AuthorResponse, error)
	UpdateAuthor(ctx context.Context, in *Author, opts ...grpc.CallOption) (*AuthorResponse, error)
	DeleteAuthor(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*Empty, error)
}

type authorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthorServiceClient(cc grpc.ClientConnInterface) AuthorServiceClient {
	return &authorServiceClient{cc}
}

func (c *authorServiceClient) GetAuthor(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*AuthorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AuthorResponse)
	err := c.cc.Invoke(ctx, AuthorService_GetAuthor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorServiceClient) ListAuthors(ctx context.Context, in *ParameterReq, opts ...grpc.CallOption) (*AuthorsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AuthorsResponse)
	err := c.cc.Invoke(ctx, AuthorService_ListAuthors_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorServiceClient) CreateAuthor(ctx context.Context, in *Author, opts ...grpc.CallOption) (*AuthorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AuthorResponse)
	err := c.cc.Invoke(ctx, AuthorService_CreateAuthor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorServiceClient) UpdateAuthor(ctx context.Context, in *Author, opts ...grpc.CallOption) (*AuthorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AuthorResponse)
	err := c.cc.Invoke(ctx, AuthorService_UpdateAuthor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorServiceClient) DeleteAuthor(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, AuthorService_DeleteAuthor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthorServiceServer is the server API for AuthorService service.
// All implementations must embed UnimplementedAuthorServiceServer
// for forward compatibility.
//
// Author Service
type AuthorServiceServer interface {
	GetAuthor(context.Context, *IdRequest) (*AuthorResponse, error)
	ListAuthors(context.Context, *ParameterReq) (*AuthorsResponse, error)
	CreateAuthor(context.Context, *Author) (*AuthorResponse, error)
	UpdateAuthor(context.Context, *Author) (*AuthorResponse, error)
	DeleteAuthor(context.Context, *IdRequest) (*Empty, error)
	mustEmbedUnimplementedAuthorServiceServer()
}

// UnimplementedAuthorServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAuthorServiceServer struct{}

func (UnimplementedAuthorServiceServer) GetAuthor(context.Context, *IdRequest) (*AuthorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuthor not implemented")
}
func (UnimplementedAuthorServiceServer) ListAuthors(context.Context, *ParameterReq) (*AuthorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAuthors not implemented")
}
func (UnimplementedAuthorServiceServer) CreateAuthor(context.Context, *Author) (*AuthorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAuthor not implemented")
}
func (UnimplementedAuthorServiceServer) UpdateAuthor(context.Context, *Author) (*AuthorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAuthor not implemented")
}
func (UnimplementedAuthorServiceServer) DeleteAuthor(context.Context, *IdRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAuthor not implemented")
}
func (UnimplementedAuthorServiceServer) mustEmbedUnimplementedAuthorServiceServer() {}
func (UnimplementedAuthorServiceServer) testEmbeddedByValue()                       {}

// UnsafeAuthorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthorServiceServer will
// result in compilation errors.
type UnsafeAuthorServiceServer interface {
	mustEmbedUnimplementedAuthorServiceServer()
}

func RegisterAuthorServiceServer(s grpc.ServiceRegistrar, srv AuthorServiceServer) {
	// If the following call pancis, it indicates UnimplementedAuthorServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AuthorService_ServiceDesc, srv)
}

func _AuthorService_GetAuthor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorServiceServer).GetAuthor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthorService_GetAuthor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorServiceServer).GetAuthor(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthorService_ListAuthors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParameterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorServiceServer).ListAuthors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthorService_ListAuthors_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorServiceServer).ListAuthors(ctx, req.(*ParameterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthorService_CreateAuthor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Author)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorServiceServer).CreateAuthor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthorService_CreateAuthor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorServiceServer).CreateAuthor(ctx, req.(*Author))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthorService_UpdateAuthor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Author)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorServiceServer).UpdateAuthor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthorService_UpdateAuthor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorServiceServer).UpdateAuthor(ctx, req.(*Author))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthorService_DeleteAuthor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorServiceServer).DeleteAuthor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthorService_DeleteAuthor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorServiceServer).DeleteAuthor(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthorService_ServiceDesc is the grpc.ServiceDesc for AuthorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "go_grpc.AuthorService",
	HandlerType: (*AuthorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAuthor",
			Handler:    _AuthorService_GetAuthor_Handler,
		},
		{
			MethodName: "ListAuthors",
			Handler:    _AuthorService_ListAuthors_Handler,
		},
		{
			MethodName: "CreateAuthor",
			Handler:    _AuthorService_CreateAuthor_Handler,
		},
		{
			MethodName: "UpdateAuthor",
			Handler:    _AuthorService_UpdateAuthor_Handler,
		},
		{
			MethodName: "DeleteAuthor",
			Handler:    _AuthorService_DeleteAuthor_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "library.proto",
}

const (
	CategoryService_GetCategory_FullMethodName    = "/go_grpc.CategoryService/GetCategory"
	CategoryService_ListCategories_FullMethodName = "/go_grpc.CategoryService/ListCategories"
	CategoryService_CreateCategory_FullMethodName = "/go_grpc.CategoryService/CreateCategory"
	CategoryService_UpdateCategory_FullMethodName = "/go_grpc.CategoryService/UpdateCategory"
	CategoryService_DeleteCategory_FullMethodName = "/go_grpc.CategoryService/DeleteCategory"
)

// CategoryServiceClient is the client API for CategoryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Category Service
type CategoryServiceClient interface {
	GetCategory(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*CategoryResponse, error)
	ListCategories(ctx context.Context, in *ParameterReq, opts ...grpc.CallOption) (*CategoriesResponse, error)
	CreateCategory(ctx context.Context, in *CategoryRequest, opts ...grpc.CallOption) (*CategoryResponse, error)
	UpdateCategory(ctx context.Context, in *CategoryRequest, opts ...grpc.CallOption) (*CategoryResponse, error)
	DeleteCategory(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*Empty, error)
}

type categoryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCategoryServiceClient(cc grpc.ClientConnInterface) CategoryServiceClient {
	return &categoryServiceClient{cc}
}

func (c *categoryServiceClient) GetCategory(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*CategoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CategoryResponse)
	err := c.cc.Invoke(ctx, CategoryService_GetCategory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoryServiceClient) ListCategories(ctx context.Context, in *ParameterReq, opts ...grpc.CallOption) (*CategoriesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CategoriesResponse)
	err := c.cc.Invoke(ctx, CategoryService_ListCategories_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoryServiceClient) CreateCategory(ctx context.Context, in *CategoryRequest, opts ...grpc.CallOption) (*CategoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CategoryResponse)
	err := c.cc.Invoke(ctx, CategoryService_CreateCategory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoryServiceClient) UpdateCategory(ctx context.Context, in *CategoryRequest, opts ...grpc.CallOption) (*CategoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CategoryResponse)
	err := c.cc.Invoke(ctx, CategoryService_UpdateCategory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoryServiceClient) DeleteCategory(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, CategoryService_DeleteCategory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CategoryServiceServer is the server API for CategoryService service.
// All implementations must embed UnimplementedCategoryServiceServer
// for forward compatibility.
//
// Category Service
type CategoryServiceServer interface {
	GetCategory(context.Context, *IdRequest) (*CategoryResponse, error)
	ListCategories(context.Context, *ParameterReq) (*CategoriesResponse, error)
	CreateCategory(context.Context, *CategoryRequest) (*CategoryResponse, error)
	UpdateCategory(context.Context, *CategoryRequest) (*CategoryResponse, error)
	DeleteCategory(context.Context, *IdRequest) (*Empty, error)
	mustEmbedUnimplementedCategoryServiceServer()
}

// UnimplementedCategoryServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCategoryServiceServer struct{}

func (UnimplementedCategoryServiceServer) GetCategory(context.Context, *IdRequest) (*CategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCategory not implemented")
}
func (UnimplementedCategoryServiceServer) ListCategories(context.Context, *ParameterReq) (*CategoriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCategories not implemented")
}
func (UnimplementedCategoryServiceServer) CreateCategory(context.Context, *CategoryRequest) (*CategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCategory not implemented")
}
func (UnimplementedCategoryServiceServer) UpdateCategory(context.Context, *CategoryRequest) (*CategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCategory not implemented")
}
func (UnimplementedCategoryServiceServer) DeleteCategory(context.Context, *IdRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCategory not implemented")
}
func (UnimplementedCategoryServiceServer) mustEmbedUnimplementedCategoryServiceServer() {}
func (UnimplementedCategoryServiceServer) testEmbeddedByValue()                         {}

// UnsafeCategoryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CategoryServiceServer will
// result in compilation errors.
type UnsafeCategoryServiceServer interface {
	mustEmbedUnimplementedCategoryServiceServer()
}

func RegisterCategoryServiceServer(s grpc.ServiceRegistrar, srv CategoryServiceServer) {
	// If the following call pancis, it indicates UnimplementedCategoryServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CategoryService_ServiceDesc, srv)
}

func _CategoryService_GetCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategoryServiceServer).GetCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CategoryService_GetCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategoryServiceServer).GetCategory(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CategoryService_ListCategories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParameterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategoryServiceServer).ListCategories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CategoryService_ListCategories_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategoryServiceServer).ListCategories(ctx, req.(*ParameterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CategoryService_CreateCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategoryServiceServer).CreateCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CategoryService_CreateCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategoryServiceServer).CreateCategory(ctx, req.(*CategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CategoryService_UpdateCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategoryServiceServer).UpdateCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CategoryService_UpdateCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategoryServiceServer).UpdateCategory(ctx, req.(*CategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CategoryService_DeleteCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategoryServiceServer).DeleteCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CategoryService_DeleteCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategoryServiceServer).DeleteCategory(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CategoryService_ServiceDesc is the grpc.ServiceDesc for CategoryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CategoryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "go_grpc.CategoryService",
	HandlerType: (*CategoryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCategory",
			Handler:    _CategoryService_GetCategory_Handler,
		},
		{
			MethodName: "ListCategories",
			Handler:    _CategoryService_ListCategories_Handler,
		},
		{
			MethodName: "CreateCategory",
			Handler:    _CategoryService_CreateCategory_Handler,
		},
		{
			MethodName: "UpdateCategory",
			Handler:    _CategoryService_UpdateCategory_Handler,
		},
		{
			MethodName: "DeleteCategory",
			Handler:    _CategoryService_DeleteCategory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "library.proto",
}

const (
	BookStockService_GetBookStock_FullMethodName    = "/go_grpc.BookStockService/GetBookStock"
	BookStockService_UpdateBookStock_FullMethodName = "/go_grpc.BookStockService/UpdateBookStock"
)

// BookStockServiceClient is the client API for BookStockService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// BookStock Service
type BookStockServiceClient interface {
	GetBookStock(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*BookStockResponse, error)
	UpdateBookStock(ctx context.Context, in *BookStockUpdate, opts ...grpc.CallOption) (*BookStockResponse, error)
}

type bookStockServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBookStockServiceClient(cc grpc.ClientConnInterface) BookStockServiceClient {
	return &bookStockServiceClient{cc}
}

func (c *bookStockServiceClient) GetBookStock(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*BookStockResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BookStockResponse)
	err := c.cc.Invoke(ctx, BookStockService_GetBookStock_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookStockServiceClient) UpdateBookStock(ctx context.Context, in *BookStockUpdate, opts ...grpc.CallOption) (*BookStockResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BookStockResponse)
	err := c.cc.Invoke(ctx, BookStockService_UpdateBookStock_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BookStockServiceServer is the server API for BookStockService service.
// All implementations must embed UnimplementedBookStockServiceServer
// for forward compatibility.
//
// BookStock Service
type BookStockServiceServer interface {
	GetBookStock(context.Context, *IdRequest) (*BookStockResponse, error)
	UpdateBookStock(context.Context, *BookStockUpdate) (*BookStockResponse, error)
	mustEmbedUnimplementedBookStockServiceServer()
}

// UnimplementedBookStockServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBookStockServiceServer struct{}

func (UnimplementedBookStockServiceServer) GetBookStock(context.Context, *IdRequest) (*BookStockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBookStock not implemented")
}
func (UnimplementedBookStockServiceServer) UpdateBookStock(context.Context, *BookStockUpdate) (*BookStockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBookStock not implemented")
}
func (UnimplementedBookStockServiceServer) mustEmbedUnimplementedBookStockServiceServer() {}
func (UnimplementedBookStockServiceServer) testEmbeddedByValue()                          {}

// UnsafeBookStockServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BookStockServiceServer will
// result in compilation errors.
type UnsafeBookStockServiceServer interface {
	mustEmbedUnimplementedBookStockServiceServer()
}

func RegisterBookStockServiceServer(s grpc.ServiceRegistrar, srv BookStockServiceServer) {
	// If the following call pancis, it indicates UnimplementedBookStockServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BookStockService_ServiceDesc, srv)
}

func _BookStockService_GetBookStock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookStockServiceServer).GetBookStock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BookStockService_GetBookStock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookStockServiceServer).GetBookStock(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookStockService_UpdateBookStock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookStockUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookStockServiceServer).UpdateBookStock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BookStockService_UpdateBookStock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookStockServiceServer).UpdateBookStock(ctx, req.(*BookStockUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

// BookStockService_ServiceDesc is the grpc.ServiceDesc for BookStockService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BookStockService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "go_grpc.BookStockService",
	HandlerType: (*BookStockServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBookStock",
			Handler:    _BookStockService_GetBookStock_Handler,
		},
		{
			MethodName: "UpdateBookStock",
			Handler:    _BookStockService_UpdateBookStock_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "library.proto",
}

const (
	BorrowingService_GetBorrowingTransaction_FullMethodName    = "/go_grpc.BorrowingService/GetBorrowingTransaction"
	BorrowingService_ListBorrowingTransactions_FullMethodName  = "/go_grpc.BorrowingService/ListBorrowingTransactions"
	BorrowingService_CreateBorrowingTransaction_FullMethodName = "/go_grpc.BorrowingService/CreateBorrowingTransaction"
	BorrowingService_UpdateBorrowingTransaction_FullMethodName = "/go_grpc.BorrowingService/UpdateBorrowingTransaction"
)

// BorrowingServiceClient is the client API for BorrowingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Borrowing Service
type BorrowingServiceClient interface {
	GetBorrowingTransaction(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*BorrowingTransactionResponse, error)
	ListBorrowingTransactions(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BorrowingTransactionsResponse, error)
	CreateBorrowingTransaction(ctx context.Context, in *CreateBorrowingTransactionRequest, opts ...grpc.CallOption) (*BorrowingTransactionResponse, error)
	UpdateBorrowingTransaction(ctx context.Context, in *UpdateBorrowingTransactionRequest, opts ...grpc.CallOption) (*BorrowingTransactionResponse, error)
}

type borrowingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBorrowingServiceClient(cc grpc.ClientConnInterface) BorrowingServiceClient {
	return &borrowingServiceClient{cc}
}

func (c *borrowingServiceClient) GetBorrowingTransaction(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*BorrowingTransactionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BorrowingTransactionResponse)
	err := c.cc.Invoke(ctx, BorrowingService_GetBorrowingTransaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *borrowingServiceClient) ListBorrowingTransactions(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BorrowingTransactionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BorrowingTransactionsResponse)
	err := c.cc.Invoke(ctx, BorrowingService_ListBorrowingTransactions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *borrowingServiceClient) CreateBorrowingTransaction(ctx context.Context, in *CreateBorrowingTransactionRequest, opts ...grpc.CallOption) (*BorrowingTransactionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BorrowingTransactionResponse)
	err := c.cc.Invoke(ctx, BorrowingService_CreateBorrowingTransaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *borrowingServiceClient) UpdateBorrowingTransaction(ctx context.Context, in *UpdateBorrowingTransactionRequest, opts ...grpc.CallOption) (*BorrowingTransactionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BorrowingTransactionResponse)
	err := c.cc.Invoke(ctx, BorrowingService_UpdateBorrowingTransaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BorrowingServiceServer is the server API for BorrowingService service.
// All implementations must embed UnimplementedBorrowingServiceServer
// for forward compatibility.
//
// Borrowing Service
type BorrowingServiceServer interface {
	GetBorrowingTransaction(context.Context, *IdRequest) (*BorrowingTransactionResponse, error)
	ListBorrowingTransactions(context.Context, *Empty) (*BorrowingTransactionsResponse, error)
	CreateBorrowingTransaction(context.Context, *CreateBorrowingTransactionRequest) (*BorrowingTransactionResponse, error)
	UpdateBorrowingTransaction(context.Context, *UpdateBorrowingTransactionRequest) (*BorrowingTransactionResponse, error)
	mustEmbedUnimplementedBorrowingServiceServer()
}

// UnimplementedBorrowingServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBorrowingServiceServer struct{}

func (UnimplementedBorrowingServiceServer) GetBorrowingTransaction(context.Context, *IdRequest) (*BorrowingTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBorrowingTransaction not implemented")
}
func (UnimplementedBorrowingServiceServer) ListBorrowingTransactions(context.Context, *Empty) (*BorrowingTransactionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBorrowingTransactions not implemented")
}
func (UnimplementedBorrowingServiceServer) CreateBorrowingTransaction(context.Context, *CreateBorrowingTransactionRequest) (*BorrowingTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBorrowingTransaction not implemented")
}
func (UnimplementedBorrowingServiceServer) UpdateBorrowingTransaction(context.Context, *UpdateBorrowingTransactionRequest) (*BorrowingTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBorrowingTransaction not implemented")
}
func (UnimplementedBorrowingServiceServer) mustEmbedUnimplementedBorrowingServiceServer() {}
func (UnimplementedBorrowingServiceServer) testEmbeddedByValue()                          {}

// UnsafeBorrowingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BorrowingServiceServer will
// result in compilation errors.
type UnsafeBorrowingServiceServer interface {
	mustEmbedUnimplementedBorrowingServiceServer()
}

func RegisterBorrowingServiceServer(s grpc.ServiceRegistrar, srv BorrowingServiceServer) {
	// If the following call pancis, it indicates UnimplementedBorrowingServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BorrowingService_ServiceDesc, srv)
}

func _BorrowingService_GetBorrowingTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BorrowingServiceServer).GetBorrowingTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BorrowingService_GetBorrowingTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BorrowingServiceServer).GetBorrowingTransaction(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BorrowingService_ListBorrowingTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BorrowingServiceServer).ListBorrowingTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BorrowingService_ListBorrowingTransactions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BorrowingServiceServer).ListBorrowingTransactions(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BorrowingService_CreateBorrowingTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBorrowingTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BorrowingServiceServer).CreateBorrowingTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BorrowingService_CreateBorrowingTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BorrowingServiceServer).CreateBorrowingTransaction(ctx, req.(*CreateBorrowingTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BorrowingService_UpdateBorrowingTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBorrowingTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BorrowingServiceServer).UpdateBorrowingTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BorrowingService_UpdateBorrowingTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BorrowingServiceServer).UpdateBorrowingTransaction(ctx, req.(*UpdateBorrowingTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BorrowingService_ServiceDesc is the grpc.ServiceDesc for BorrowingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BorrowingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "go_grpc.BorrowingService",
	HandlerType: (*BorrowingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBorrowingTransaction",
			Handler:    _BorrowingService_GetBorrowingTransaction_Handler,
		},
		{
			MethodName: "ListBorrowingTransactions",
			Handler:    _BorrowingService_ListBorrowingTransactions_Handler,
		},
		{
			MethodName: "CreateBorrowingTransaction",
			Handler:    _BorrowingService_CreateBorrowingTransaction_Handler,
		},
		{
			MethodName: "UpdateBorrowingTransaction",
			Handler:    _BorrowingService_UpdateBorrowingTransaction_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "library.proto",
}

const (
	ReturningService_ReturnBook_FullMethodName = "/go_grpc.ReturningService/ReturnBook"
)

// ReturningServiceClient is the client API for ReturningService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Returning Service
type ReturningServiceClient interface {
	ReturnBook(ctx context.Context, in *ReturnBookRequest, opts ...grpc.CallOption) (*ReturnBookResponse, error)
}

type returningServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewReturningServiceClient(cc grpc.ClientConnInterface) ReturningServiceClient {
	return &returningServiceClient{cc}
}

func (c *returningServiceClient) ReturnBook(ctx context.Context, in *ReturnBookRequest, opts ...grpc.CallOption) (*ReturnBookResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReturnBookResponse)
	err := c.cc.Invoke(ctx, ReturningService_ReturnBook_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReturningServiceServer is the server API for ReturningService service.
// All implementations must embed UnimplementedReturningServiceServer
// for forward compatibility.
//
// Returning Service
type ReturningServiceServer interface {
	ReturnBook(context.Context, *ReturnBookRequest) (*ReturnBookResponse, error)
	mustEmbedUnimplementedReturningServiceServer()
}

// UnimplementedReturningServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedReturningServiceServer struct{}

func (UnimplementedReturningServiceServer) ReturnBook(context.Context, *ReturnBookRequest) (*ReturnBookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReturnBook not implemented")
}
func (UnimplementedReturningServiceServer) mustEmbedUnimplementedReturningServiceServer() {}
func (UnimplementedReturningServiceServer) testEmbeddedByValue()                          {}

// UnsafeReturningServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReturningServiceServer will
// result in compilation errors.
type UnsafeReturningServiceServer interface {
	mustEmbedUnimplementedReturningServiceServer()
}

func RegisterReturningServiceServer(s grpc.ServiceRegistrar, srv ReturningServiceServer) {
	// If the following call pancis, it indicates UnimplementedReturningServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ReturningService_ServiceDesc, srv)
}

func _ReturningService_ReturnBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReturnBookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReturningServiceServer).ReturnBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReturningService_ReturnBook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReturningServiceServer).ReturnBook(ctx, req.(*ReturnBookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ReturningService_ServiceDesc is the grpc.ServiceDesc for ReturningService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ReturningService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "go_grpc.ReturningService",
	HandlerType: (*ReturningServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReturnBook",
			Handler:    _ReturningService_ReturnBook_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "library.proto",
}
